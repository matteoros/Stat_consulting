df_meta$upper_CI = df$upper_CI
df_meta$SE = (df_meta$effect_size - df_meta$lower_CI)/qnorm(0.975)
df_meta
convert_r_to_d = function(r){
num = 2*r
denom = sqrt((1 - r^2))
return(num/denom)
}
convertSE_r_toSE_d = function(SE, r){
num = 4*sqrt(SE)
denom = (1 - r^2)^3
return(num/denom)
}
# Apply the functions only to the rows where d_or_R is 'r'
df_meta$effect_size <- ifelse(df_meta$d_or_R == 'r', convert_r_to_d(df_meta$effect_size), df_meta$effect_size)
df_meta$SE <- ifelse(df_meta$d_or_R == 'r', convertSE_r_toSE_d(df_meta$SE, df_meta$effect_size), df_meta$SE)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
df = read_excel("PaperCharacterizationTable_Meta.xlsx",
sheet = "Metacognition",
skip = 1)
df = df %>% select(-starts_with('...'))
colnames(df)
# Sample size included, Sex (%female), "Ethnic background (% white)"
# age range, d or R, effect size, V, 95% CI
# Select only the columns you're interested in
df_meta = df %>% select(`Sample size included`, `Sex (%female)`, `Ethnic background (% white)`,
`age range`, `d or R`, `effect size`, `V`, `95% CI`)
# Define the function
transform_var_names <- function(df) {
# Get the variable names
var_names <- names(df)
# Replace spaces with underscores
new_var_names <- gsub(" ", "_", var_names)
# Assign the new variable names back to the data frame
names(df) <- new_var_names
# Return the modified data frame
return(df)
}
# Use the function
df_meta <- transform_var_names(df_meta)
df_meta
df_meta |> colnames()
df_meta = df_meta[df_meta$d_or_R == "r" | df_meta$d_or_R == "d", ]
df_meta$d_or_R = as.factor(df_meta$d_or_R)
df_meta
df_meta = df_meta[!is.na(df_meta$V),]
df_meta$`Ethnic_background_(%_white)` = ifelse(df_meta$`Ethnic_background_(%_white)` == "-", NA, df_meta$`Ethnic_background_(%_white)`)
# Define the function
convert_percentage <- function(vec) {
# Identify the elements that end with a "%" sign
percentage_indices <- grepl("%$", vec)
# For these elements, remove the "%" sign, convert to numeric, and divide by 100
vec[percentage_indices] <- as.numeric(sub("%", "", vec[percentage_indices])) / 100
# Convert to as.numeric
vec = as.numeric(vec)
# Return the modified vector
return(vec)
}
df_meta$`Ethnic_background_(%_white)` = convert_percentage(df_meta$`Ethnic_background_(%_white)`)
df_meta$`Sex_(%female)` = ifelse(df_meta$`Sex_(%female)` == '-', NA, df_meta$`Sex_(%female)`)
df_meta$`Sex_(%female)` = convert_percentage(df_meta$`Sex_(%female)`)
df_meta$`Sex_(%female)`
df_meta$effect_size[30] = '1.177'
# Define the function
convert_values <- function(vec) {
# Identify the elements that end with a "%" sign
percentage_indices <- grepl("%$", vec)
# For these elements, remove the "%" sign, convert to numeric, and divide by 100
vec[percentage_indices] <- as.numeric(sub("%", "", vec[percentage_indices])) / 100
# Identify the elements that start with "("
bracket_indices <- grepl("^\\(", vec)
# For these elements, remove the "(" and ")" characters and convert to numeric
vec[bracket_indices] <- as.numeric(sub("\\)$", "", sub("^\\(", "", vec[bracket_indices])))
# Convert the rest of the vector to numeric
vec[!is.na(vec) & !percentage_indices & !bracket_indices] <- as.numeric(vec[!is.na(vec) & !percentage_indices & !bracket_indices])
# Return the modified vector
return(vec)
}
df_meta$effect_size = convert_values(df_meta$effect_size)
df_meta$V = as.numeric(df_meta$V)
df_meta$effect_size = as.numeric(df_meta$effect_size)
df_meta$std = sqrt(df_meta$V)
str(df_meta)
# Define the function
fix_and_split_values <- function(vec) {
# Replace the first and third commas with a period
fixed_vec <- gsub("^\\[([^,]*),", "[\\1.", vec)
fixed_vec <- gsub(",([^,]*)\\]$", ".\\1]", fixed_vec)
# Split the string at the remaining comma
split_vec <- strsplit(fixed_vec, ",")
# Initialize vectors for val1 and val2
val1 <- numeric(length(vec))
val2 <- numeric(length(vec))
# Loop over the split_vec list
for (i in seq_along(split_vec)) {
# Remove the "[" and "]" characters and convert to numeric
val1[i] <- as.numeric(gsub("\\[", "", split_vec[[i]][1]))
val2[i] <- as.numeric(gsub("\\]", "", split_vec[[i]][2]))
}
# Return a data frame with two columns
return(data.frame(val1 = val1, val2 = val2))
}
# Use the function
fix_and_split_values(df_meta$`95%_CI`)
# Load the stringr package
library(stringr)
# Define the string
str <- "[0,0694, 0,315]"
# Count the number of commas
str_count(str, ",")
convert_CI = function(CI){
CI_final = c()
for(ci in CI){
if (str_count(ci, ',') == 3){
ci = gsub("^\\[([^,]*),", "[\\1.", str)
ci = gsub(",([^,]*)\\]$", ".\\1]", str)
}
CI_final = c(CI_final, ci)
}
return(CI_final)
}
convert_CI(df_meta$`95%_CI`)
num_commas = str_count(df_meta$`95%_CI`, ',')
ind = which(num_commas == 3)
for(i in ind) {
string = df_meta$`95%_CI`[i]
string = gsub("^\\[([^,]*),", "[\\1.", string)
string = gsub(",([^,]*)\\]$", ".\\1]", string)
df_meta$`95%_CI`[i] = string
}
df_meta$`95%_CI`
# Define the function
split_values <- function(vec) {
# Split the string at the comma
split_vec <- strsplit(vec, ",")
# Initialize vectors for val1 and val2
val1 <- numeric(length(vec))
val2 <- numeric(length(vec))
# Loop over the split_vec list
for (i in seq_along(split_vec)) {
# Check if there are more than two elements
if (length(split_vec[[i]]) > 2) {
# There is an error
next
}
# Remove the "[" and "]" characters, replace any commas with periods, and convert to numeric
val1[i] <- as.numeric(sub(",", ".", gsub("\\[", "", split_vec[[i]][1])))
val2[i] <- as.numeric(sub(",", ".", gsub("\\]", "", split_vec[[i]][2])))
}
# Return a data frame with two columns
return(data.frame(lower_CI = val1, upper_CI = val2))
}
# Use the function
df = split_values(df_meta$`95%_CI`)
df
df_meta$lower_CI = df$lower_CI
df_meta$upper_CI = df$upper_CI
df_meta$SE = (df_meta$effect_size - df_meta$lower_CI)/qnorm(0.975)
df_meta
convert_r_to_d = function(r){
num = 2*r
denom = sqrt((1 - r^2))
return(num/denom)
}
convertSE_r_toSE_d = function(SE, r){
num = 4*sqrt(SE)
denom = (1 - r^2)^3
return(num/denom)
}
# Apply the functions only to the rows where d_or_R is 'r'
ifelse(df_meta$d_or_R == 'r', convert_r_to_d(df_meta$effect_size), df_meta$effect_size)
#ifelse(df_meta$d_or_R == 'r', convertSE_r_toSE_d(df_meta$SE, df_meta$effect_size), df_meta$SE)
# Apply the functions only to the rows where d_or_R is 'r'
#ifelse(df_meta$d_or_R == 'r', convert_r_to_d(df_meta$effect_size), df_meta$effect_size)
ifelse(df_meta$d_or_R == 'r', convertSE_r_toSE_d(df_meta$SE, df_meta$effect_size), df_meta$SE)
# Apply the functions only to the rows where d_or_R is 'r'
ifelse(df_meta$d_or_R == 'r', convert_r_to_d(df_meta$effect_size), df_meta$effect_size)
which(is.na(ifelse(df_meta$d_or_R == 'r', convertSE_r_toSE_d(df_meta$SE, df_meta$effect_size), df_meta$SE)))
df_meta$SE
df_meta$effect_size
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
df = read_excel("PaperCharacterizationTable_Meta.xlsx",
sheet = "Metacognition",
skip = 1)
df = df %>% select(-starts_with('...'))
colnames(df)
# Sample size included, Sex (%female), "Ethnic background (% white)"
# age range, d or R, effect size, V, 95% CI
# Select only the columns you're interested in
df_meta = df %>% select(`Sample size included`, `Sex (%female)`, `Ethnic background (% white)`,
`age range`, `d or R`, `effect size`, `V`, `95% CI`)
# Define the function
transform_var_names <- function(df) {
# Get the variable names
var_names <- names(df)
# Replace spaces with underscores
new_var_names <- gsub(" ", "_", var_names)
# Assign the new variable names back to the data frame
names(df) <- new_var_names
# Return the modified data frame
return(df)
}
# Use the function
df_meta <- transform_var_names(df_meta)
df_meta
df_meta |> colnames()
df_meta = df_meta[df_meta$d_or_R == "r" | df_meta$d_or_R == "d", ]
df_meta$d_or_R = as.factor(df_meta$d_or_R)
df_meta
df_meta = df_meta[!is.na(df_meta$V),]
df_meta$`Ethnic_background_(%_white)` = ifelse(df_meta$`Ethnic_background_(%_white)` == "-", NA, df_meta$`Ethnic_background_(%_white)`)
# Define the function
convert_percentage <- function(vec) {
# Identify the elements that end with a "%" sign
percentage_indices <- grepl("%$", vec)
# For these elements, remove the "%" sign, convert to numeric, and divide by 100
vec[percentage_indices] <- as.numeric(sub("%", "", vec[percentage_indices])) / 100
# Convert to as.numeric
vec = as.numeric(vec)
# Return the modified vector
return(vec)
}
df_meta$`Ethnic_background_(%_white)` = convert_percentage(df_meta$`Ethnic_background_(%_white)`)
df_meta$`Sex_(%female)` = ifelse(df_meta$`Sex_(%female)` == '-', NA, df_meta$`Sex_(%female)`)
df_meta$`Sex_(%female)` = convert_percentage(df_meta$`Sex_(%female)`)
df_meta$`Sex_(%female)`
df_meta$effect_size[30] = '1.177'
# Define the function
convert_values <- function(vec) {
# Identify the elements that end with a "%" sign
percentage_indices <- grepl("%$", vec)
# For these elements, remove the "%" sign, convert to numeric, and divide by 100
vec[percentage_indices] <- as.numeric(sub("%", "", vec[percentage_indices])) / 100
# Identify the elements that start with "("
bracket_indices <- grepl("^\\(", vec)
# For these elements, remove the "(" and ")" characters and convert to numeric
vec[bracket_indices] <- as.numeric(sub("\\)$", "", sub("^\\(", "", vec[bracket_indices])))
# Convert the rest of the vector to numeric
vec[!is.na(vec) & !percentage_indices & !bracket_indices] <- as.numeric(vec[!is.na(vec) & !percentage_indices & !bracket_indices])
# Return the modified vector
return(vec)
}
df_meta$effect_size = convert_values(df_meta$effect_size)
df_meta$V = as.numeric(df_meta$V)
df_meta$effect_size = as.numeric(df_meta$effect_size)
df_meta$std = sqrt(df_meta$V)
str(df_meta)
# Define the function
fix_and_split_values <- function(vec) {
# Replace the first and third commas with a period
fixed_vec <- gsub("^\\[([^,]*),", "[\\1.", vec)
fixed_vec <- gsub(",([^,]*)\\]$", ".\\1]", fixed_vec)
# Split the string at the remaining comma
split_vec <- strsplit(fixed_vec, ",")
# Initialize vectors for val1 and val2
val1 <- numeric(length(vec))
val2 <- numeric(length(vec))
# Loop over the split_vec list
for (i in seq_along(split_vec)) {
# Remove the "[" and "]" characters and convert to numeric
val1[i] <- as.numeric(gsub("\\[", "", split_vec[[i]][1]))
val2[i] <- as.numeric(gsub("\\]", "", split_vec[[i]][2]))
}
# Return a data frame with two columns
return(data.frame(val1 = val1, val2 = val2))
}
# Use the function
fix_and_split_values(df_meta$`95%_CI`)
# Load the stringr package
library(stringr)
# Define the string
str <- "[0,0694, 0,315]"
# Count the number of commas
str_count(str, ",")
convert_CI = function(CI){
CI_final = c()
for(ci in CI){
if (str_count(ci, ',') == 3){
ci = gsub("^\\[([^,]*),", "[\\1.", str)
ci = gsub(",([^,]*)\\]$", ".\\1]", str)
}
CI_final = c(CI_final, ci)
}
return(CI_final)
}
convert_CI(df_meta$`95%_CI`)
num_commas = str_count(df_meta$`95%_CI`, ',')
ind = which(num_commas == 3)
for(i in ind) {
string = df_meta$`95%_CI`[i]
string = gsub("^\\[([^,]*),", "[\\1.", string)
string = gsub(",([^,]*)\\]$", ".\\1]", string)
df_meta$`95%_CI`[i] = string
}
df_meta$`95%_CI`
# Define the function
split_values <- function(vec) {
# Split the string at the comma
split_vec <- strsplit(vec, ",")
# Initialize vectors for val1 and val2
val1 <- numeric(length(vec))
val2 <- numeric(length(vec))
# Loop over the split_vec list
for (i in seq_along(split_vec)) {
# Check if there are more than two elements
if (length(split_vec[[i]]) > 2) {
# There is an error
next
}
# Remove the "[" and "]" characters, replace any commas with periods, and convert to numeric
val1[i] <- as.numeric(sub(",", ".", gsub("\\[", "", split_vec[[i]][1])))
val2[i] <- as.numeric(sub(",", ".", gsub("\\]", "", split_vec[[i]][2])))
}
# Return a data frame with two columns
return(data.frame(lower_CI = val1, upper_CI = val2))
}
# Use the function
df = split_values(df_meta$`95%_CI`)
df
df_meta$lower_CI = df$lower_CI
df_meta$upper_CI = df$upper_CI
df_meta$SE = (df_meta$effect_size - df_meta$lower_CI)/qnorm(0.975)
df_meta
convert_r_to_d = function(r){
num = 2*r
denom = sqrt((1 - r^2))
return(num/denom)
}
convertSE_r_toSE_d = function(SE, r){
num = 4*sqrt(SE)
denom = (1 - r^2)^3
return(num/denom)
}
df_meta_r = df_meta[df_meta$d_or_R == "r", ]
df_meta_r = df_meta[df_meta$d_or_R == "r", ]
df_meta_r$effect_size = convert_r_to_d(df_meta_r$effect_size)
df_meta_r$SE = convertSE_r_toSE_d(df_meta_r$SE, df_meta_r$effect_size)
str(df_meta_r)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
df = read_excel("PaperCharacterizationTable_Meta.xlsx",
sheet = "Metacognition",
skip = 1)
df = df %>% select(-starts_with('...'))
colnames(df)
# Sample size included, Sex (%female), "Ethnic background (% white)"
# age range, d or R, effect size, V, 95% CI
# Select only the columns you're interested in
df_meta = df %>% select(`Sample size included`, `Sex (%female)`, `Ethnic background (% white)`,
`age range`, `d or R`, `effect size`, `V`, `95% CI`)
# Define the function
transform_var_names <- function(df) {
# Get the variable names
var_names <- names(df)
# Replace spaces with underscores
new_var_names <- gsub(" ", "_", var_names)
# Assign the new variable names back to the data frame
names(df) <- new_var_names
# Return the modified data frame
return(df)
}
# Use the function
df_meta <- transform_var_names(df_meta)
df_meta
df_meta |> colnames()
df_meta = df_meta[df_meta$d_or_R == "r" | df_meta$d_or_R == "d", ]
df_meta$d_or_R = as.factor(df_meta$d_or_R)
df_meta
df_meta = df_meta[!is.na(df_meta$V),]
df_meta$`Ethnic_background_(%_white)` = ifelse(df_meta$`Ethnic_background_(%_white)` == "-", NA, df_meta$`Ethnic_background_(%_white)`)
# Define the function
convert_percentage <- function(vec) {
# Identify the elements that end with a "%" sign
percentage_indices <- grepl("%$", vec)
# For these elements, remove the "%" sign, convert to numeric, and divide by 100
vec[percentage_indices] <- as.numeric(sub("%", "", vec[percentage_indices])) / 100
# Convert to as.numeric
vec = as.numeric(vec)
# Return the modified vector
return(vec)
}
df_meta$`Ethnic_background_(%_white)` = convert_percentage(df_meta$`Ethnic_background_(%_white)`)
df_meta$`Sex_(%female)` = ifelse(df_meta$`Sex_(%female)` == '-', NA, df_meta$`Sex_(%female)`)
df_meta$`Sex_(%female)` = convert_percentage(df_meta$`Sex_(%female)`)
df_meta$`Sex_(%female)`
df_meta$effect_size[30] = '1.177'
# Define the function
convert_values <- function(vec) {
# Identify the elements that end with a "%" sign
percentage_indices <- grepl("%$", vec)
# For these elements, remove the "%" sign, convert to numeric, and divide by 100
vec[percentage_indices] <- as.numeric(sub("%", "", vec[percentage_indices])) / 100
# Identify the elements that start with "("
bracket_indices <- grepl("^\\(", vec)
# For these elements, remove the "(" and ")" characters and convert to numeric
vec[bracket_indices] <- as.numeric(sub("\\)$", "", sub("^\\(", "", vec[bracket_indices])))
# Convert the rest of the vector to numeric
vec[!is.na(vec) & !percentage_indices & !bracket_indices] <- as.numeric(vec[!is.na(vec) & !percentage_indices & !bracket_indices])
# Return the modified vector
return(vec)
}
df_meta$effect_size = convert_values(df_meta$effect_size)
df_meta$V = as.numeric(df_meta$V)
df_meta$effect_size = as.numeric(df_meta$effect_size)
df_meta$std = sqrt(df_meta$V)
str(df_meta)
# Define the function
fix_and_split_values <- function(vec) {
# Replace the first and third commas with a period
fixed_vec <- gsub("^\\[([^,]*),", "[\\1.", vec)
fixed_vec <- gsub(",([^,]*)\\]$", ".\\1]", fixed_vec)
# Split the string at the remaining comma
split_vec <- strsplit(fixed_vec, ",")
# Initialize vectors for val1 and val2
val1 <- numeric(length(vec))
val2 <- numeric(length(vec))
# Loop over the split_vec list
for (i in seq_along(split_vec)) {
# Remove the "[" and "]" characters and convert to numeric
val1[i] <- as.numeric(gsub("\\[", "", split_vec[[i]][1]))
val2[i] <- as.numeric(gsub("\\]", "", split_vec[[i]][2]))
}
# Return a data frame with two columns
return(data.frame(val1 = val1, val2 = val2))
}
# Use the function
fix_and_split_values(df_meta$`95%_CI`)
# Load the stringr package
library(stringr)
# Define the string
str <- "[0,0694, 0,315]"
# Count the number of commas
str_count(str, ",")
convert_CI = function(CI){
CI_final = c()
for(ci in CI){
if (str_count(ci, ',') == 3){
ci = gsub("^\\[([^,]*),", "[\\1.", str)
ci = gsub(",([^,]*)\\]$", ".\\1]", str)
}
CI_final = c(CI_final, ci)
}
return(CI_final)
}
convert_CI(df_meta$`95%_CI`)
num_commas = str_count(df_meta$`95%_CI`, ',')
ind = which(num_commas == 3)
for(i in ind) {
string = df_meta$`95%_CI`[i]
string = gsub("^\\[([^,]*),", "[\\1.", string)
string = gsub(",([^,]*)\\]$", ".\\1]", string)
df_meta$`95%_CI`[i] = string
}
df_meta$`95%_CI`
# Define the function
split_values <- function(vec) {
# Split the string at the comma
split_vec <- strsplit(vec, ",")
# Initialize vectors for val1 and val2
val1 <- numeric(length(vec))
val2 <- numeric(length(vec))
# Loop over the split_vec list
for (i in seq_along(split_vec)) {
# Check if there are more than two elements
if (length(split_vec[[i]]) > 2) {
# There is an error
next
}
# Remove the "[" and "]" characters, replace any commas with periods, and convert to numeric
val1[i] <- as.numeric(sub(",", ".", gsub("\\[", "", split_vec[[i]][1])))
val2[i] <- as.numeric(sub(",", ".", gsub("\\]", "", split_vec[[i]][2])))
}
# Return a data frame with two columns
return(data.frame(lower_CI = val1, upper_CI = val2))
}
# Use the function
df = split_values(df_meta$`95%_CI`)
df
df_meta$lower_CI = df$lower_CI
df_meta$upper_CI = df$upper_CI
(df_meta$effect_size - df_meta$lower_CI)/qnorm(0.975)
(df_meta$upper_CI - df_meta$effect_size)/qnorm(0.975)
(df_meta$upper_CI - df_meta$effect_size)/(qnorm(0.975))
df_meta
0.06377668^2/357
0.06377668^2/(357-1)
sqrt(0.004)
sqrt(df_meta$V)
sqrt(df_meta$V/df_meta$Sample_size_included)
df_meta$SE = sqrt(df_meta$V/df_meta$Sample_size_included)
df_meta$lower_CI = df_meta$effect_size - df_meta$SE*qnorm(0.975)
df_meta$upper_CI = df_meta$effect_size + df_meta$SE*qnorm(0.975)
df_meta
convert_r_to_d = function(r){
num = 2*r
denom = sqrt((1 - r^2))
return(num/denom)
}
convertSE_r_toSE_d = function(SE, r){
num = 4*sqrt(SE)
denom = (1 - r^2)^3
return(num/denom)
}
str(df_meta_r)
# Apply the functions only to the rows where d_or_R is 'r'
df_meta$effect_size = ifelse(df_meta$d_or_R == 'r', convert_r_to_d(df_meta$effect_size), df_meta$effect_size)
df_meta$SE = ifelse(df_meta$d_or_R == 'r', convertSE_r_toSE_d(df_meta$SE, df_meta$effect_size), df_meta$SE)
